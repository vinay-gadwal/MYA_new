// Generated by Apple Swift version 4.1.2 effective-3.3.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import AVFoundation;
@import ObjectiveC;
@import Foundation;
@import CoreMedia;
@import MediaPlayer;
@import UIKit;
#endif

#import "/Users/mac/Desktop/React-native-projects/check/node_modules/react-native-track-player/ios/RNTrackPlayer/Support/RNTrackPlayer-Bridging-Header.h"

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RNTrackPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class BackgroundHandler;
@class NetworkEventProducer;
@class PlayerEventProducer;
@class SeekEventProducer;
@class QualityAdjustmentEventProducer;
@class TrackEventProducer;
@class RetryEventProducer;
@class Track;
enum AudioPlayerBufferingStrategy : NSInteger;
@class AVPlayerItem;

/// An <code>AudioPlayer</code> instance is used to play <code>AudioPlayerItem</code>. Itâ€™s an easy to use AVPlayer with simple methods to
/// handle the whole playing audio process.
/// You can get events (such as state change or time observation) by registering a delegate.
SWIFT_CLASS("_TtC13RNTrackPlayer11AudioPlayer")
@interface AudioPlayer : NSObject
/// The background handler.
@property (nonatomic, readonly, strong) BackgroundHandler * _Nonnull backgroundHandler;
/// The network event producer.
@property (nonatomic, strong) NetworkEventProducer * _Nonnull networkEventProducer;
/// The player event producer.
@property (nonatomic, readonly, strong) PlayerEventProducer * _Nonnull playerEventProducer;
/// The seek event producer.
@property (nonatomic, readonly, strong) SeekEventProducer * _Nonnull seekEventProducer;
/// The quality adjustment event producer.
@property (nonatomic, strong) QualityAdjustmentEventProducer * _Nonnull qualityAdjustmentEventProducer;
/// The audio item event producer.
@property (nonatomic, strong) TrackEventProducer * _Nonnull trackEventProducer;
/// The retry event producer.
@property (nonatomic, strong) RetryEventProducer * _Nonnull retryEventProducer;
/// The audio player.
@property (nonatomic, strong) AVPlayer * _Nullable player;
/// The current item being played.
@property (nonatomic, strong) Track * _Nullable currentItem;
/// Defines the maximum to wait after a connection loss before putting the player to Stopped mode and cancelling
/// the resume. Default value is 60 seconds.
@property (nonatomic) NSTimeInterval maximumConnectionLossTime;
/// Defines whether the player should automatically adjust sound quality based on the number of interruption before
/// a delay and the maximum number of interruption whithin this delay. Default value is <code>true</code>.
@property (nonatomic) BOOL adjustQualityAutomatically;
/// Defines the delay within which the player wait for an interruption before upgrading the quality. Default value
/// is 10 minutes.
@property (nonatomic) NSTimeInterval adjustQualityTimeInternal;
/// Defines the maximum number of interruption to have within the <code>adjustQualityTimeInterval</code> delay before
/// downgrading the quality. Default value is 5.
@property (nonatomic) NSInteger adjustQualityAfterInterruptionCount;
/// The maximum number of interruption before putting the player to Stopped mode. Default value is 10.
@property (nonatomic) NSInteger maximumRetryCount;
/// The delay to wait before cancelling last retry and retrying. Default value is 10 seconds.
@property (nonatomic) NSTimeInterval retryTimeout;
/// Defines whether the player should resume after a system interruption or not. Default value is <code>true</code>.
@property (nonatomic) BOOL resumeAfterInterruption;
/// Defines whether the player should resume after a connection loss or not. Default value is <code>true</code>.
@property (nonatomic) BOOL resumeAfterConnectionLoss;
/// Defines the volume of the player. <code>1.0</code> means 100% and <code>0.0</code> is 0%.
@property (nonatomic) float volume;
- (float)getVolume SWIFT_WARN_UNUSED_RESULT;
/// Defines the rate of the player. Default value is 1.
@property (nonatomic) float rate;
- (float)getRate SWIFT_WARN_UNUSED_RESULT;
/// Defines the buffering strategy used to determine how much to buffer before starting playback
@property (nonatomic) enum AudioPlayerBufferingStrategy bufferingStrategy;
/// Defines the preferred buffer duration in seconds before playback begins. Defaults to 60.
/// Works on iOS/tvOS 10+ when <code>bufferingStrategy</code> is <code>.playWhenPreferredBufferDurationFull</code>.
@property (nonatomic) NSTimeInterval preferredBufferDurationBeforePlayback;
/// Defines the preferred size of the forward buffer for the underlying <code>AVPlayerItem</code>.
/// Works on iOS/tvOS 10+, default is 0, which lets <code>AVPlayer</code> decide.
@property (nonatomic) NSTimeInterval preferredForwardBufferDuration;
- (void)playWithTrack:(Track * _Nonnull)track;
/// A boolean value indicating whether the player has been paused because of a system interruption.
@property (nonatomic) BOOL pausedForInterruption;
/// A boolean value indicating if quality is being changed. Itâ€™s necessary for the interruption count to not be
/// incremented while new quality is buffering.
@property (nonatomic) BOOL qualityIsBeingChanged;
/// Convenience for checking if platform is currently online
@property (nonatomic, readonly) BOOL isOnline;
/// Initializes a new AudioPlayer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Updates the MPNowPlayingInfoCenter with current itemâ€™s info.
- (void)updateNowPlayingInfoCenter;
/// Enables or disables the <code>AVAudioSession</code> and sets the right category.
/// \param active A boolean value indicating whether the audio session should be set to active or not.
///
- (void)setAudioSessionWithActive:(BOOL)active;
/// Boolean value indicating whether the player should resume playing (after buffering)
@property (nonatomic, readonly) BOOL shouldResumePlaying;
/// This will retry to play current item and seek back at the correct position if possible (or enabled). If not,
/// itâ€™ll just play the next item in queue.
- (void)retryOrPlayNext;
/// Updates the current player based on the current buffering strategy.
/// Only has an effect on iOS 10+, tvOS 10+ and macOS 10.12+
- (void)updatePlayerForBufferingStrategy;
/// Updates a given player item based on the <code>preferredForwardBufferDuration</code> set.
/// Only has an effect on iOS 10+, tvOS 10+ and macOS 10.12+
- (void)updatePlayerItemForBufferingStrategy:(AVPlayerItem * _Nonnull)playerItem;
@end
















@interface AudioPlayer (SWIFT_EXTENSION(RNTrackPlayer))
/// Resumes the player.
- (void)resume;
/// Pauses the player.
- (void)pause;
/// Starts playing the current item immediately. Works on iOS/tvOS 10+ and macOS 10.12+
- (void)playImmediately;
/// Stops the player and clear the queue.
- (void)stop;
/// Seeks to a specific time.
/// \param time The time to seek to.
///
/// \param byAdaptingTimeToFitSeekableRanges A boolean value indicating whether the time should be adapted to current
/// seekable ranges in order to be bufferless.
///
/// \param toleranceBefore The tolerance allowed before time.
///
/// \param toleranceAfter The tolerance allowed after time.
///
/// \param completionHandler The optional callback that gets executed upon completion with a boolean param indicating
/// if the operation has finished.
///
- (void)seekTo:(NSTimeInterval)time byAdaptingTimeToFitSeekableRanges:(BOOL)byAdaptingTimeToFitSeekableRanges toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// Seeks backwards as far as possible.
/// <ul>
///   <li>
///     completionHandler: The optional callback that gets executed upon completion with a boolean param indicating
///     if the operation has finished.
///   </li>
/// </ul>
/// \param padding The padding to apply if any.
///
- (void)seekToSeekableRangeStartWithPadding:(NSTimeInterval)padding completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// Seeks forward as far as possible.
/// <ul>
///   <li>
///     completionHandler: The optional callback that gets executed upon completion with a boolean param indicating
///     if the operation has finished.
///   </li>
/// </ul>
/// \param padding The padding to apply if any.
///
- (void)seekToSeekableRangeEndWithPadding:(NSTimeInterval)padding completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
@end



/// Represents the strategy used for buffering of items before playback is started
typedef SWIFT_ENUM(NSInteger, AudioPlayerBufferingStrategy) {
/// Uses the default AVPlayer buffering strategy, which buffers very aggressively before starting playback.
/// This often leads to start of playback being delayed more than necessary.
  AudioPlayerBufferingStrategyDefaultBuffering = 0,
/// Uses a strategy better at quickly starting playback. Duration to buffer before playback is customizable through
/// the <code>preferredBufferDurationBeforePlayback</code> variable. Requires iOS/tvOS 10+ to have any effect.
  AudioPlayerBufferingStrategyPlayWhenPreferredBufferDurationFull = 1,
/// Uses a strategy that simply starts playback whenever the AVPlayerItem buffer is non-empty. Requires iOS/tvOS 10+ to have any effect.
  AudioPlayerBufferingStrategyPlayWhenBufferNotEmpty = 2,
};


/// A <code>BackgroundHandler</code> handles background.
SWIFT_CLASS("_TtC13RNTrackPlayer17BackgroundHandler")
@interface BackgroundHandler : NSObject
/// Starts a background task if there isnâ€™t already one.
///
/// returns:
/// A boolean value indicating whether a background task was created or not.
- (BOOL)beginBackgroundTask;
/// Ends the background task if there is one.
///
/// returns:
/// A boolean value indicating whether a background task was ended or not.
- (BOOL)endBackgroundTask;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class NSDate;

/// A <code>NetworkEventProducer</code> generates <code>NetworkEvent</code>s when there is changes on the network.
SWIFT_CLASS("_TtC13RNTrackPlayer20NetworkEventProducer")
@interface NetworkEventProducer : NSObject
/// The date at which connection was lost.
@property (nonatomic, readonly, strong) NSDate * _Nullable connectionLossDate;
/// Starts listening to the player events.
- (void)startProducingEvents;
/// Stops listening to the player events.
- (void)stopProducingEvents;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A <code>PlayerEventProducer</code> listens to notifications and observes events generated by an AVPlayer.
SWIFT_CLASS("_TtC13RNTrackPlayer19PlayerEventProducer")
@interface PlayerEventProducer : NSObject
/// The player to produce events with.
/// Note that setting it has the same result as calling <code>stopProducingEvents</code>.
@property (nonatomic, strong) AVPlayer * _Nullable player;
/// Starts listening to the player events.
- (void)startProducingEvents;
/// Stops listening to the player events.
- (void)stopProducingEvents;
/// This message is sent to the receiver when the value at the specified key path relative to the given object has
/// changed. The receiver must be registered as an observer for the specified <code>keyPath</code> and <code>object</code>.
/// \param keyPath The key path, relative to <code>object</code>, to the value that has changed.
///
/// \param object The source object of the key path <code>keyPath</code>.
///
/// \param change A dictionary that describes the changes that have been made to the value of the property at the key
/// path <code>keyPath</code> relative to <code>object</code>. Entries are described in Change Dictionary Keys.
///
/// \param context The value that was provided when the receiver was registered to receive key-value observation
/// notifications.
///
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>QualityAdjustmentEventProducer</code> generates <code>QualityAdjustmentEvent</code>s when there should be a change of quality
/// based on some information about interruptions.
SWIFT_CLASS("_TtC13RNTrackPlayer30QualityAdjustmentEventProducer")
@interface QualityAdjustmentEventProducer : NSObject
/// Interruption counter. It will be used to determine whether the quality should change.
@property (nonatomic) NSInteger interruptionCount;
/// Defines the delay within which the player wait for an interruption before upgrading the quality. Default value
/// is 10 minutes.
@property (nonatomic) NSTimeInterval adjustQualityTimeInternal;
/// Defines the maximum number of interruption to have within the <code>adjustQualityTimeInterval</code> delay before
/// downgrading the quality. Default value is 5.
@property (nonatomic) NSInteger adjustQualityAfterInterruptionCount;
/// Starts listening to the player events.
- (void)startProducingEvents;
/// Stops listening to the player events.
- (void)stopProducingEvents;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MPSkipIntervalCommandEvent;

SWIFT_CLASS_NAMED("RNTrackPlayer")
@interface RNTrackPlayer : RCTEventEmitter
- (void)playerUpdatedState;
- (void)playbackFailedWithError:(NSError * _Nonnull)error;
+ (BOOL)requiresMainQueueSetup SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)constantsToExport SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)supportedEvents SWIFT_WARN_UNUSED_RESULT;
- (void)setupPlayer:(NSDictionary<NSString *, id> * _Nonnull)config resolver:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)destroy;
- (void)updateOptions:(NSDictionary<NSString *, id> * _Nonnull)options;
- (void)add:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)trackDicts before:(NSString * _Nullable)trackId resolver:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)remove:(NSArray<NSString *> * _Nonnull)ids resolver:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)removeUpcomingTracks;
- (void)skip:(NSString * _Nonnull)trackId resolver:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)skipToNext:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)skipToPrevious:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)reset;
- (void)play;
- (void)pause;
- (void)stop;
- (void)seekTo:(double)time;
- (void)setVolume:(float)level;
- (void)getVolume:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)setRate:(float)rate;
- (void)getRate:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)getTrack:(NSString * _Nonnull)id resolver:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)getQueue:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)getCurrentTrack:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)getDuration:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)getBufferedPosition:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)getPosition:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)getState:(SWIFT_NOESCAPE void (^ _Nonnull)(id _Nullable))resolve rejecter:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))reject;
- (void)remoteSentStop;
- (void)remoteSentPause;
- (void)remoteSentPlay;
- (void)remoteSentNext;
- (void)remoteSentPrevious;
- (void)remoteSendSkipForwardWithEvent:(MPSkipIntervalCommandEvent * _Nonnull)event;
- (void)remoteSendSkipBackwardWithEvent:(MPSkipIntervalCommandEvent * _Nonnull)event;
- (void)remoteSentPlayPause;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>RetryEventProducer</code> generates <code>RetryEvent</code>s when there should be a retry based on some information about
/// interruptions.
SWIFT_CLASS("_TtC13RNTrackPlayer18RetryEventProducer")
@interface RetryEventProducer : NSObject
/// The maximum number of interruption before generating an event. Default value is 10.
@property (nonatomic) NSInteger maximumRetryCount;
/// The delay to wait before cancelling last retry and retrying. Default value is 10 seconds.
@property (nonatomic) NSTimeInterval retryTimeout;
/// Starts listening to the player events.
- (void)startProducingEvents;
/// Stops listening to the player events.
- (void)stopProducingEvents;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>SeekEventProducer</code> generates <code>SeekEvent</code>s when itâ€™s time to seek on the stream.
SWIFT_CLASS("_TtC13RNTrackPlayer17SeekEventProducer")
@interface SeekEventProducer : NSObject
/// The delay to wait before cancelling last retry and retrying. Default value is 10 seconds.
@property (nonatomic) NSTimeInterval intervalBetweenEvents;
/// A boolean value indicating whether the producer should generate backward or forward events.
@property (nonatomic) BOOL isBackward;
/// Starts listening to the player events.
- (void)startProducingEvents;
/// Stops listening to the player events.
- (void)stopProducingEvents;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MPMediaItemArtwork;

SWIFT_CLASS("_TtC13RNTrackPlayer5Track")
@interface Track : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull artist;
@property (nonatomic, readonly, copy) NSString * _Nullable date;
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
@property (nonatomic, readonly, copy) NSString * _Nullable genre;
@property (nonatomic, readonly, copy) NSString * _Nullable pitchAlgorithm;
@property (nonatomic) BOOL skipped;
@property (nonatomic, readonly, copy) NSString * _Nullable album;
@property (nonatomic, strong) MPMediaItemArtwork * _Nullable artwork;
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)toObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




/// An <code>TrackEventProducer</code> generates event when a property of an <code>AudioItem</code> has changed.
SWIFT_CLASS("_TtC13RNTrackPlayer18TrackEventProducer")
@interface TrackEventProducer : NSObject
/// The player to produce events with.
/// Note that setting it has the same result as calling <code>stopProducingEvents</code>.
@property (nonatomic, strong) Track * _Nullable item;
/// Starts listening to the player events.
- (void)startProducingEvents;
/// Stops listening to the player events.
- (void)stopProducingEvents;
/// This message is sent to the receiver when the value at the specified key path relative to the given object has
/// changed. The receiver must be registered as an observer for the specified <code>keyPath</code> and <code>object</code>.
/// \param keyPath The key path, relative to <code>object</code>, to the value that has changed.
///
/// \param object The source object of the key path <code>keyPath</code>.
///
/// \param change A dictionary that describes the changes that have been made to the value of the property at the key
/// path <code>keyPath</code> relative to <code>object</code>. Entries are described in Change Dictionary Keys.
///
/// \param context The value that was provided when the receiver was registered to receive key-value observation
/// notifications.
///
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
